using System;
using System.Linq.Expressions;
using Moq;

namespace Moq.CompactSetup.Delegates
{
    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref1Func1<TParameter1, out TResult>(out TParameter1 parameter1);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref1Func2<TParameter1, out TResult>(ref TParameter1 parameter1);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func1<TParameter1, in TParameter2, out TResult>(out TParameter1 parameter1, TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func2<TParameter1, in TParameter2, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func3<in TParameter1, TParameter2, out TResult>(TParameter1 parameter1, out TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func4<TParameter1, TParameter2, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func5<TParameter1, TParameter2, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func6<in TParameter1, TParameter2, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func7<TParameter1, TParameter2, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref2Func8<TParameter1, TParameter2, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func1<TParameter1, in TParameter2, in TParameter3, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func2<TParameter1, in TParameter2, in TParameter3, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func3<in TParameter1, TParameter2, in TParameter3, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func4<TParameter1, TParameter2, in TParameter3, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func5<TParameter1, TParameter2, in TParameter3, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func6<in TParameter1, TParameter2, in TParameter3, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func7<TParameter1, TParameter2, in TParameter3, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func8<TParameter1, TParameter2, in TParameter3, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func9<in TParameter1, in TParameter2, TParameter3, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func10<TParameter1, in TParameter2, TParameter3, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func11<TParameter1, in TParameter2, TParameter3, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func12<in TParameter1, TParameter2, TParameter3, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func13<TParameter1, TParameter2, TParameter3, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func14<TParameter1, TParameter2, TParameter3, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func15<in TParameter1, TParameter2, TParameter3, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func16<TParameter1, TParameter2, TParameter3, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func17<TParameter1, TParameter2, TParameter3, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func18<in TParameter1, in TParameter2, TParameter3, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func19<TParameter1, in TParameter2, TParameter3, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func20<TParameter1, in TParameter2, TParameter3, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func21<in TParameter1, TParameter2, TParameter3, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func22<TParameter1, TParameter2, TParameter3, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func23<TParameter1, TParameter2, TParameter3, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func24<in TParameter1, TParameter2, TParameter3, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func25<TParameter1, TParameter2, TParameter3, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref3Func26<TParameter1, TParameter2, TParameter3, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func1<TParameter1, in TParameter2, in TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func2<TParameter1, in TParameter2, in TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func3<in TParameter1, TParameter2, in TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func4<TParameter1, TParameter2, in TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func5<TParameter1, TParameter2, in TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func6<in TParameter1, TParameter2, in TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func7<TParameter1, TParameter2, in TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func8<TParameter1, TParameter2, in TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func9<in TParameter1, in TParameter2, TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func10<TParameter1, in TParameter2, TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func11<TParameter1, in TParameter2, TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func12<in TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func13<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func14<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func15<in TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func16<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func17<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func18<in TParameter1, in TParameter2, TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func19<TParameter1, in TParameter2, TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func20<TParameter1, in TParameter2, TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func21<in TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func22<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func23<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func24<in TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func25<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func26<TParameter1, TParameter2, TParameter3, in TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func27<in TParameter1, in TParameter2, in TParameter3, TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func28<TParameter1, in TParameter2, in TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func29<TParameter1, in TParameter2, in TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func30<in TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func31<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func32<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func33<in TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func34<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func35<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func36<in TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func37<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func38<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func39<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func40<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func41<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func42<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func43<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func44<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func45<in TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func46<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func47<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func48<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func49<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func50<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func51<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func52<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func53<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func54<in TParameter1, in TParameter2, in TParameter3, TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func55<TParameter1, in TParameter2, in TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func56<TParameter1, in TParameter2, in TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func57<in TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func58<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func59<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func60<in TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func61<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func62<TParameter1, TParameter2, in TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func63<in TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func64<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func65<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func66<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func67<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func68<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func69<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func70<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func71<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func72<in TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func73<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func74<TParameter1, in TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func75<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func76<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func77<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func78<in TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func79<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref4Func80<TParameter1, TParameter2, TParameter3, TParameter4, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func1<TParameter1, in TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func2<TParameter1, in TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func3<in TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func4<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func5<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func6<in TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func7<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func8<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func9<in TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func10<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func11<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func12<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func13<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func14<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func15<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func16<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func17<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func18<in TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func19<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func20<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func21<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func22<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func23<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func24<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func25<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func26<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func27<in TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func28<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func29<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func30<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func31<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func32<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func33<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func34<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func35<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func36<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func37<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func38<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func39<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func40<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func41<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func42<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func43<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func44<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func45<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func46<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func47<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func48<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func49<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func50<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func51<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func52<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func53<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func54<in TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func55<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func56<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func57<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func58<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func59<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func60<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func61<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func62<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func63<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func64<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func65<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func66<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func67<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func68<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func69<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func70<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func71<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func72<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func73<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func74<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func75<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func76<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func77<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func78<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func79<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func80<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func81<in TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func82<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func83<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func84<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func85<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func86<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func87<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func88<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func89<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func90<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func91<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func92<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func93<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func94<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func95<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func96<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func97<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func98<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func99<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func100<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func101<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func102<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func103<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func104<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func105<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func106<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func107<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func108<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func109<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func110<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func111<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func112<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func113<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func114<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func115<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func116<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func117<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func118<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func119<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func120<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func121<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func122<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func123<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func124<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func125<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func126<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func127<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func128<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func129<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func130<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func131<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func132<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func133<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func134<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func135<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func136<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func137<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func138<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func139<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func140<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func141<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func142<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func143<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func144<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func145<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func146<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func147<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func148<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func149<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func150<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func151<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func152<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func153<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func154<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func155<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func156<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func157<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func158<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func159<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func160<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func161<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func162<in TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func163<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func164<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func165<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func166<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func167<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func168<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func169<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func170<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func171<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func172<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func173<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func174<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func175<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func176<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func177<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func178<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func179<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func180<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func181<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func182<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func183<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func184<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func185<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func186<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func187<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func188<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func189<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func190<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func191<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func192<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func193<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func194<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func195<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func196<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func197<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func198<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func199<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func200<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func201<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func202<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func203<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func204<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func205<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func206<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func207<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func208<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func209<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func210<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func211<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func212<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func213<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func214<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func215<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func216<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func217<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func218<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func219<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func220<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func221<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func222<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func223<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func224<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func225<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func226<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func227<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func228<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func229<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func230<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func231<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func232<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func233<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func234<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func235<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func236<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func237<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func238<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func239<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func240<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func241<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    /// <returns> The result. </returns>
    public delegate TResult Ref5Func242<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, out TResult>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

}

namespace Moq.CompactSetup
{
    /// <summary>
    /// The mock extensions class.
    /// </summary>
    public static partial class MockExtensions
    {
  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref1Func1<TParameter1, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref1Func2<TParameter1, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func1<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func2<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func3<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func4<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func5<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func6<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func7<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref2Func8<TParameter1, TParameter2, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func1<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func2<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func3<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func4<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func5<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func6<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func7<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func8<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func9<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func10<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func11<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func12<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func13<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func14<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func15<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func16<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func17<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func18<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func19<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func20<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func21<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func22<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func23<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func24<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func25<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref3Func26<TParameter1, TParameter2, TParameter3, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func1<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func2<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func3<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func4<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func5<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func6<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func7<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func8<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func9<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func10<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func11<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func12<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func13<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func14<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func15<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func16<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func17<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func18<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func19<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func20<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func21<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func22<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func23<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func24<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func25<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func26<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func27<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func28<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func29<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func30<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func31<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func32<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func33<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func34<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func35<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func36<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func37<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func38<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func39<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func40<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func41<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func42<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func43<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func44<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func45<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func46<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func47<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func48<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func49<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func50<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func51<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func52<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func53<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func54<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func55<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func56<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func57<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func58<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func59<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func60<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func61<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func62<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func63<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func64<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func65<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func66<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func67<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func68<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func69<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func70<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func71<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func72<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func73<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func74<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func75<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func76<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func77<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func78<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func79<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref4Func80<TParameter1, TParameter2, TParameter3, TParameter4, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func1<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func2<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func3<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func4<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func5<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func7<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func8<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func9<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func10<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func11<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func12<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func13<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func14<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func15<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func16<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func17<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func18<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func19<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func20<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func21<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func22<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func23<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func24<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func25<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func26<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func27<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func28<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func29<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func30<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func31<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func32<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func33<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func34<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func35<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func36<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func37<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func38<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func39<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func40<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func41<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func42<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func43<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func44<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func45<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func46<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func47<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func48<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func49<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func50<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func51<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func52<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func53<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func54<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func55<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func56<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func57<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func58<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func59<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func60<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func61<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func62<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func63<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func64<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func65<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func66<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func67<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func68<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func69<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func70<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func71<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func72<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func73<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func74<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func75<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func76<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func77<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func78<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func79<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func80<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func81<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func82<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func83<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func84<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func85<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func86<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func87<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func88<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func89<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func90<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func91<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func92<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func93<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func94<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func95<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func96<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func97<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func98<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func99<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func100<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func101<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func102<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func103<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func104<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func105<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func106<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func107<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func108<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func109<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func110<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func111<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func112<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func113<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func114<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func115<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func116<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func117<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func118<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func119<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func120<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func121<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func122<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func123<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func124<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func125<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func126<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func127<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func128<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func129<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func130<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func131<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func132<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func133<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func134<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func135<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func136<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func137<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func138<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func139<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func140<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func141<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func142<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func143<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func144<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func145<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func146<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func147<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func148<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func149<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func150<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func151<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func152<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func153<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func154<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func155<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func156<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func157<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func158<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func159<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func160<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func161<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func162<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func163<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func164<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func165<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func166<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func167<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func168<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func169<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func170<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func171<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func172<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func173<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func174<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func175<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func176<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func177<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func178<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func179<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func180<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func181<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func182<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func183<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func184<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func185<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func186<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func187<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func188<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func189<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func190<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func191<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func192<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func193<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func194<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func195<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func196<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func197<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func198<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func199<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func200<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func201<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func202<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func203<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func204<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func205<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func206<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func207<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func208<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func209<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func210<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func211<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func212<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func213<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func214<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func215<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func216<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func217<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func218<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func219<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func220<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func221<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func222<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func223<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func224<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func225<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func226<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func227<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func228<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func229<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func230<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func231<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func232<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func233<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func234<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func235<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func236<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func237<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func238<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func239<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func240<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func241<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref5Func242<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5, TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

  
    }
} 