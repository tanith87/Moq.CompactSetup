using System;
using System.Linq.Expressions;
using Moq;

namespace Moq.CompactSetup.Delegates
{
    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    public delegate void Ref1Action1<TParameter1>(out TParameter1 parameter1);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    public delegate void Ref1Action2<TParameter1>(ref TParameter1 parameter1);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action1<TParameter1, in TParameter2>(out TParameter1 parameter1, TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action2<TParameter1, in TParameter2>(ref TParameter1 parameter1, TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action3<in TParameter1, TParameter2>(TParameter1 parameter1, out TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action4<TParameter1, TParameter2>(out TParameter1 parameter1, out TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action5<TParameter1, TParameter2>(ref TParameter1 parameter1, out TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action6<in TParameter1, TParameter2>(TParameter1 parameter1, ref TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action7<TParameter1, TParameter2>(out TParameter1 parameter1, ref TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    public delegate void Ref2Action8<TParameter1, TParameter2>(ref TParameter1 parameter1, ref TParameter2 parameter2);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action1<TParameter1, in TParameter2, in TParameter3>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action2<TParameter1, in TParameter2, in TParameter3>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action3<in TParameter1, TParameter2, in TParameter3>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action4<TParameter1, TParameter2, in TParameter3>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action5<TParameter1, TParameter2, in TParameter3>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action6<in TParameter1, TParameter2, in TParameter3>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action7<TParameter1, TParameter2, in TParameter3>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action8<TParameter1, TParameter2, in TParameter3>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action9<in TParameter1, in TParameter2, TParameter3>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action10<TParameter1, in TParameter2, TParameter3>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action11<TParameter1, in TParameter2, TParameter3>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action12<in TParameter1, TParameter2, TParameter3>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action13<TParameter1, TParameter2, TParameter3>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action14<TParameter1, TParameter2, TParameter3>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action15<in TParameter1, TParameter2, TParameter3>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action16<TParameter1, TParameter2, TParameter3>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action17<TParameter1, TParameter2, TParameter3>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action18<in TParameter1, in TParameter2, TParameter3>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action19<TParameter1, in TParameter2, TParameter3>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action20<TParameter1, in TParameter2, TParameter3>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action21<in TParameter1, TParameter2, TParameter3>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action22<TParameter1, TParameter2, TParameter3>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action23<TParameter1, TParameter2, TParameter3>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action24<in TParameter1, TParameter2, TParameter3>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action25<TParameter1, TParameter2, TParameter3>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    public delegate void Ref3Action26<TParameter1, TParameter2, TParameter3>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action1<TParameter1, in TParameter2, in TParameter3, in TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action2<TParameter1, in TParameter2, in TParameter3, in TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action3<in TParameter1, TParameter2, in TParameter3, in TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action4<TParameter1, TParameter2, in TParameter3, in TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action5<TParameter1, TParameter2, in TParameter3, in TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action6<in TParameter1, TParameter2, in TParameter3, in TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action7<TParameter1, TParameter2, in TParameter3, in TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action8<TParameter1, TParameter2, in TParameter3, in TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action9<in TParameter1, in TParameter2, TParameter3, in TParameter4>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action10<TParameter1, in TParameter2, TParameter3, in TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action11<TParameter1, in TParameter2, TParameter3, in TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action12<in TParameter1, TParameter2, TParameter3, in TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action13<TParameter1, TParameter2, TParameter3, in TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action14<TParameter1, TParameter2, TParameter3, in TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action15<in TParameter1, TParameter2, TParameter3, in TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action16<TParameter1, TParameter2, TParameter3, in TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action17<TParameter1, TParameter2, TParameter3, in TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action18<in TParameter1, in TParameter2, TParameter3, in TParameter4>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action19<TParameter1, in TParameter2, TParameter3, in TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action20<TParameter1, in TParameter2, TParameter3, in TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action21<in TParameter1, TParameter2, TParameter3, in TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action22<TParameter1, TParameter2, TParameter3, in TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action23<TParameter1, TParameter2, TParameter3, in TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action24<in TParameter1, TParameter2, TParameter3, in TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action25<TParameter1, TParameter2, TParameter3, in TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action26<TParameter1, TParameter2, TParameter3, in TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action27<in TParameter1, in TParameter2, in TParameter3, TParameter4>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action28<TParameter1, in TParameter2, in TParameter3, TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action29<TParameter1, in TParameter2, in TParameter3, TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action30<in TParameter1, TParameter2, in TParameter3, TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action31<TParameter1, TParameter2, in TParameter3, TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action32<TParameter1, TParameter2, in TParameter3, TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action33<in TParameter1, TParameter2, in TParameter3, TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action34<TParameter1, TParameter2, in TParameter3, TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action35<TParameter1, TParameter2, in TParameter3, TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action36<in TParameter1, in TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action37<TParameter1, in TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action38<TParameter1, in TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action39<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action40<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action41<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action42<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action43<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action44<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action45<in TParameter1, in TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action46<TParameter1, in TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action47<TParameter1, in TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action48<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action49<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action50<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action51<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action52<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action53<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action54<in TParameter1, in TParameter2, in TParameter3, TParameter4>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action55<TParameter1, in TParameter2, in TParameter3, TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action56<TParameter1, in TParameter2, in TParameter3, TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action57<in TParameter1, TParameter2, in TParameter3, TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action58<TParameter1, TParameter2, in TParameter3, TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action59<TParameter1, TParameter2, in TParameter3, TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action60<in TParameter1, TParameter2, in TParameter3, TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action61<TParameter1, TParameter2, in TParameter3, TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action62<TParameter1, TParameter2, in TParameter3, TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action63<in TParameter1, in TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action64<TParameter1, in TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action65<TParameter1, in TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action66<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action67<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action68<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action69<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action70<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action71<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action72<in TParameter1, in TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action73<TParameter1, in TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action74<TParameter1, in TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action75<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action76<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action77<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action78<in TParameter1, TParameter2, TParameter3, TParameter4>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action79<TParameter1, TParameter2, TParameter3, TParameter4>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    public delegate void Ref4Action80<TParameter1, TParameter2, TParameter3, TParameter4>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action1<TParameter1, in TParameter2, in TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action2<TParameter1, in TParameter2, in TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action3<in TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action4<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action5<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action6<in TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action7<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action8<TParameter1, TParameter2, in TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action9<in TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action10<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action11<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action12<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action13<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action14<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action15<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action16<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action17<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action18<in TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action19<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action20<TParameter1, in TParameter2, TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action21<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action22<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action23<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action24<in TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action25<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action26<TParameter1, TParameter2, TParameter3, in TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action27<in TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action28<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action29<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action30<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action31<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action32<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action33<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action34<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action35<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action36<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action37<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action38<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action39<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action40<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action41<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action42<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action43<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action44<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action45<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action46<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action47<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action48<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action49<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action50<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action51<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action52<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action53<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action54<in TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action55<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action56<TParameter1, in TParameter2, in TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action57<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action58<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action59<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action60<in TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action61<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action62<TParameter1, TParameter2, in TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action63<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action64<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action65<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action66<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action67<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action68<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action69<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action70<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action71<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action72<in TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action73<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action74<TParameter1, in TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action75<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action76<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action77<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action78<in TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action79<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action80<TParameter1, TParameter2, TParameter3, TParameter4, in TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action81<in TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action82<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action83<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action84<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action85<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action86<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action87<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action88<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action89<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action90<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action91<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action92<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action93<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action94<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action95<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action96<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action97<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action98<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action99<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action100<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action101<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action102<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action103<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action104<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action105<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action106<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action107<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action108<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action109<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action110<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action111<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action112<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action113<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action114<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action115<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action116<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action117<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action118<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action119<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action120<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action121<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action122<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action123<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action124<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action125<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action126<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action127<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action128<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action129<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action130<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action131<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action132<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action133<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action134<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action135<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action136<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action137<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action138<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action139<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action140<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action141<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action142<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action143<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action144<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action145<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action146<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action147<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action148<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action149<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action150<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action151<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action152<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action153<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action154<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action155<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action156<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action157<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action158<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action159<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action160<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action161<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, out TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action162<in TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action163<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action164<TParameter1, in TParameter2, in TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action165<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action166<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action167<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action168<in TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action169<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action170<TParameter1, TParameter2, in TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action171<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action172<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action173<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action174<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action175<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action176<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action177<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action178<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action179<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action180<in TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action181<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action182<TParameter1, in TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action183<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action184<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action185<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action186<in TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action187<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action188<TParameter1, TParameter2, TParameter3, in TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action189<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action190<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action191<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action192<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action193<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action194<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action195<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action196<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action197<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action198<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action199<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action200<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action201<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action202<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action203<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action204<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action205<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action206<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action207<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action208<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action209<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action210<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action211<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action212<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action213<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action214<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action215<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, out TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action216<in TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action217<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action218<TParameter1, in TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action219<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action220<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action221<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action222<in TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action223<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action224<TParameter1, TParameter2, in TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action225<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action226<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action227<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action228<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action229<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action230<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action231<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action232<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action233<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, out TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action234<in TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action235<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action236<TParameter1, in TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action237<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action238<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action239<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, out TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action240<in TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action241<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(out TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
    /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
    /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
    /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
    /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
    /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
    /// <param name="parameter1"> The 1. parameter. </param>
    /// <param name="parameter2"> The 2. parameter. </param>
    /// <param name="parameter3"> The 3. parameter. </param>
    /// <param name="parameter4"> The 4. parameter. </param>
    /// <param name="parameter5"> The 5. parameter. </param>
    public delegate void Ref5Action242<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(ref TParameter1 parameter1, ref TParameter2 parameter2, ref TParameter3 parameter3, ref TParameter4 parameter4, ref TParameter5 parameter5);

}

namespace Moq.CompactSetup
{
    /// <summary>
    /// The mock extensions class.
    /// </summary>
    public static partial class MockExtensions
    {
  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref1Action1<TParameter1> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref1Action2<TParameter1> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action1<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action2<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action3<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action4<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action5<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action6<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action7<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref2Action8<TParameter1, TParameter2> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action1<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action2<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action3<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action4<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action5<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action6<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action7<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action8<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action9<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action10<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action11<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action12<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action13<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action14<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action15<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action16<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action17<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action18<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action19<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action20<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action21<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action22<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action23<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action24<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action25<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref3Action26<TParameter1, TParameter2, TParameter3> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action1<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action2<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action3<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action4<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action5<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action6<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action7<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action8<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action9<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action10<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action11<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action12<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action13<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action14<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action15<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action16<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action17<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action18<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action19<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action20<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action21<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action22<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action23<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action24<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action25<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action26<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action27<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action28<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action29<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action30<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action31<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action32<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action33<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action34<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action35<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action36<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action37<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action38<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action39<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action40<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action41<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action42<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action43<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action44<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action45<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action46<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action47<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action48<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action49<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action50<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action51<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action52<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action53<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action54<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action55<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action56<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action57<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action58<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action59<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action60<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action61<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action62<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action63<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action64<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action65<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action66<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action67<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action68<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action69<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action70<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action71<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action72<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action73<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action74<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action75<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action76<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action77<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action78<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action79<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref4Action80<TParameter1, TParameter2, TParameter3, TParameter4> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action1<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action2<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action3<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action4<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action5<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action6<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action7<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action8<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action9<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action10<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action11<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action12<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action13<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action14<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action15<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action16<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action17<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action18<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action19<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action20<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action21<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action22<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action23<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action24<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action25<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action26<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action27<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action28<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action29<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action30<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action31<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action32<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action33<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action34<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action35<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action36<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action37<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action38<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action39<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action40<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action41<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action42<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action43<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action44<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action45<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action46<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action47<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action48<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action49<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action50<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action51<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action52<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action53<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action54<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action55<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action56<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action57<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action58<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action59<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action60<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action61<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action62<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action63<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action64<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action65<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action66<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action67<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action68<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action69<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action70<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action71<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action72<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action73<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action74<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action75<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action76<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action77<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action78<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action79<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action80<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action81<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action82<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action83<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action84<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action85<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action86<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action87<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action88<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action89<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action90<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action91<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action92<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action93<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action94<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action95<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action96<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action97<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action98<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action99<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action100<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action101<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action102<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action103<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action104<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action105<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action106<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action107<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action108<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action109<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action110<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action111<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action112<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action113<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action114<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action115<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action116<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action117<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action118<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action119<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action120<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action121<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action122<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action123<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action124<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action125<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action126<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action127<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action128<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action129<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action130<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action131<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action132<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action133<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action134<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action135<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action136<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action137<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action138<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action139<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action140<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action141<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action142<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action143<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action144<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action145<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action146<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action147<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action148<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action149<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action150<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action151<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action152<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action153<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action154<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action155<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action156<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action157<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action158<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action159<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action160<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action161<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action162<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action163<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action164<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action165<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action166<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action167<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action168<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action169<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action170<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action171<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action172<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action173<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action174<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action175<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action176<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action177<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action178<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action179<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action180<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action181<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action182<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action183<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action184<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action185<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action186<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action187<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action188<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action189<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action190<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action191<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action192<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action193<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action194<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action195<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action196<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action197<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action198<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action199<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action200<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action201<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action202<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action203<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action204<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action205<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action206<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action207<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action208<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action209<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action210<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action211<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action212<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action213<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action214<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action215<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action216<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action217<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action218<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action219<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action220<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action221<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action222<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action223<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action224<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action225<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action226<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action227<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action228<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action229<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action230<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action231<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action232<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action233<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action234<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action235<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action236<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action237<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action238<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action239<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action240<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action241<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
        /// <summary>
        /// Sets up a member with the specified callback action.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
        /// <typeparam name="TParameter1"> The type of the 1. parameter. </typeparam>
        /// <typeparam name="TParameter2"> The type of the 2. parameter. </typeparam>
        /// <typeparam name="TParameter3"> The type of the 3. parameter. </typeparam>
        /// <typeparam name="TParameter4"> The type of the 4. parameter. </typeparam>
        /// <typeparam name="TParameter5"> The type of the 5. parameter. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="action"> The action to call when the member is utilized. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="action"/> is <c>null</c>. </exception>
        public static Mock<TMockable> WithCallback<TMockable, TParameter1, TParameter2, TParameter3, TParameter4, TParameter5>(this Mock<TMockable> mock, Expression<Action<TMockable>> memberExpression, Delegates.Ref5Action242<TParameter1, TParameter2, TParameter3, TParameter4, TParameter5> action)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (action == null)
            {
                throw new ArgumentNullException(nameof(action));
            }

            mock.Setup(memberExpression).Callback(action);
            return mock;
        }

  
    }
} 