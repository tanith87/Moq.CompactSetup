<#@ output extension=".cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    const int PARAMETER_COUNT = 5;
    const int VARIATION_INDEX_TYPE_OUT = 1;
    const int VARIATION_INDEX_TYPE_REF = 2;

    IEnumerable<string> GetParameterTypes(int count)
    {
        for(int i = 1; i <= count; i++)
        {
            yield return $"TParameter{i}";
        }
    }

    IEnumerable<string> GetParameterNames(int count)
    {
        for(int i = 1; i <= count; i++)
        {
            yield return $"parameter{i}";
        }
    }

    IEnumerable<string> GetParameterRole(int count, int variation)
    {
        for(int i = 0; i < count; i++)
        {
            var indexType = GetVariationIndexType(variation, i);
            if (indexType == VARIATION_INDEX_TYPE_OUT)
            {
                yield return $"out ";
            }
            else if (indexType == VARIATION_INDEX_TYPE_REF)
            {
                yield return $"ref ";
            }
            else 
            {
                yield return $"";
            }
        }
    }

    IEnumerable<string> GetTypeParameterRole(int count, int variation)
    {
        for(int i = 0; i < count; i++)
        {
            var indexType = GetVariationIndexType(variation, i);
            if (indexType == VARIATION_INDEX_TYPE_OUT || indexType == VARIATION_INDEX_TYPE_REF)
            {
                yield return $"";
            }
            else 
            {
                yield return $"in ";
            }
        }
    }

    int GetVariationIndexType(int variation, int index)
    {
        return (variation / (int)Math.Pow(3, index)) % 3;
    }
    
    string GetParameterTypesString(int count)
    {
        var types = GetParameterTypes(count).ToArray();
        var parameters = new List<string>();
        for(int i = 0; i < types.Length; i++)
        {
            parameters.Add($"{types[i]}");
        }

        return String.Join(", ", parameters);
    }
        
    string GetParameterTypesStringWithRoles(int count, int variation)
    {
        var types = GetParameterTypes(count).ToArray();
        var roles = GetTypeParameterRole(count, variation).ToArray();
        var parameters = new List<string>();
        for(int i = 0; i < types.Length; i++)
        {
            parameters.Add($"{roles[i]}{types[i]}");
        }

        return String.Join(", ", parameters);
    }
        
    string GetParameterTypedNamesString(int count, int variation)
    {
        var types = GetParameterTypes(count).ToArray();
        var names = GetParameterNames(count).ToArray();
        var roles = GetParameterRole(count, variation).ToArray();
        var parameters = new List<string>();
        for(int i = 0; i < types.Length; i++)
        {
            parameters.Add($"{roles[i]}{types[i]} {names[i]}");
        }

        return String.Join(", ", parameters);
    }


#>
using System;
using System.Linq.Expressions;
using Moq;

namespace Moq.CompactSetup.Delegates
{
<#
    for (int i = 0; i <= PARAMETER_COUNT; i++)
    {
        var startVariation = 1; // Skip the first, as the first is just no out parameter.
        var maxVariations = (int)Math.Pow(3, i);
        for (int variation = 1; variation < maxVariations; variation++)
        {
#>
    /// <summary>
    /// The signature for a method with in and out parameters.
    /// </summary>
<#
            for (int j = 1; j <= i; j++)
            {
#>
    /// <typeparam name="TParameter<#= j #>"> The type of the <#= j #>. parameter. </typeparam>
<#
            }
#>
    /// <typeparam name="TResult"> The type of the result. </typeparam>
<#
            for (int j = 1; j <= i; j++)
            {
#>
    /// <param name="parameter<#= j #>"> The <#= j #>. parameter. </param>
<#
            }
#>
    /// <returns> The result. </returns>
    public delegate TResult Ref<#= i #>Func<#= variation #><<#= GetParameterTypesStringWithRoles(i, variation) #>, out TResult>(<#= GetParameterTypedNamesString(i, variation) #>);

<#
        }
    }
#>
}

namespace Moq.CompactSetup
{
    /// <summary>
    /// The mock extensions class.
    /// </summary>
    public static partial class MockExtensions
    {
<#
    for(int i = 0; i <= PARAMETER_COUNT; i++) 
    {
        var startVariation = 1; // Skip the first, as the first is just no out parameter.
        var maxVariations = (int)Math.Pow(3, i);
        for (int variation = 1; variation < maxVariations; variation++)
        {
#>  
        /// <summary>
        /// Sets up a member with the specified value selector.
        /// </summary>
        /// <typeparam name="TMockable"> The type of the mockable class or interface. </typeparam>
<#
            for (int j = 1; j <= i; j++)
            {
#>
        /// <typeparam name="TParameter<#= j #>"> The type of the <#= j #>. parameter. </typeparam>
<#
            }
#>
        /// <typeparam name="TResult"> The type of the result. </typeparam>
        /// <param name="mock"> The mock. </param>
        /// <param name="memberExpression"> The member expression to set up. </param>
        /// <param name="valueSelector"> The function returning the value for specified parameters. </param>
        /// <returns> The same mock again. </returns>
        /// <exception cref="ArgumentNullException"> When <paramref name="mock"/>, <paramref name="memberExpression"/> or <paramref name="valueSelector"/> is <c>null</c>. </exception>
        public static Mock<TMockable> With<TMockable<#= (i > 0 ? ", " : "") #><#= GetParameterTypesString(i) #>, TResult>(this Mock<TMockable> mock, Expression<Func<TMockable, TResult>> memberExpression, Delegates.Ref<#= i #>Func<#= variation #><<#= GetParameterTypesString(i) #><#= (i > 0 ? ", " : "") #>TResult> valueSelector)
            where TMockable : class
        {
            if (mock == null)
            {
                throw new ArgumentNullException(nameof(mock));
            }

            if (memberExpression == null)
            {
                throw new ArgumentNullException(nameof(memberExpression));
            }

            if (valueSelector == null)
            {
                throw new ArgumentNullException(nameof(valueSelector));
            }

            mock.Setup(memberExpression).Returns(valueSelector);
            return mock;
        }

<#
        }
    }
#>  
    }
} 